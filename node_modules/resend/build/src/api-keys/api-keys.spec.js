"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_fetch_mock_1 = require("jest-fetch-mock");
const resend_1 = require("../resend");
(0, jest_fetch_mock_1.enableFetchMocks)();
describe('API Keys', () => {
    afterEach(() => fetchMock.resetMocks());
    describe('create', () => {
        it('creates an api key', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({
                token: 're_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk',
                id: '430eed87-632a-4ea6-90db-0aace67ec228',
            }), {
                status: 201,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.create({ name: 'Test' })).resolves
                .toMatchInlineSnapshot(`
        {
          "id": "430eed87-632a-4ea6-90db-0aace67ec228",
          "token": "re_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk",
        }
      `);
        }));
        it('throws error when missing name', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({
                statusCode: 422,
                name: 'missing_required_field',
                message: 'Missing "name" field',
            }), {
                status: 422,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.create({ name: '' })).resolves
                .toMatchInlineSnapshot(`
        {
          "message": "Missing "name" field",
          "name": "missing_required_field",
          "statusCode": 422,
        }
      `);
        }));
        describe('with access', () => {
            it('creates api key with access `full_access`', () => __awaiter(void 0, void 0, void 0, function* () {
                fetchMock.mockOnce(JSON.stringify({
                    token: 're_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk',
                    id: '430eed87-632a-4ea6-90db-0aace67ec228',
                }), {
                    status: 201,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_924b3rjh2387fbewf823',
                    },
                });
                const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
                yield expect(resend.apiKeys.create({ name: 'Test', permission: 'full_access' })).resolves.toMatchInlineSnapshot(`
          {
            "id": "430eed87-632a-4ea6-90db-0aace67ec228",
            "token": "re_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk",
          }
        `);
            }));
            it('creates api key with access `sending_access`', () => __awaiter(void 0, void 0, void 0, function* () {
                fetchMock.mockOnce(JSON.stringify({
                    token: 're_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk',
                    id: '430eed87-632a-4ea6-90db-0aace67ec228',
                }), {
                    status: 201,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_924b3rjh2387fbewf823',
                    },
                });
                const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
                yield expect(resend.apiKeys.create({
                    name: 'Test',
                    permission: 'sending_access',
                })).resolves.toMatchInlineSnapshot(`
          {
            "id": "430eed87-632a-4ea6-90db-0aace67ec228",
            "token": "re_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk",
          }
        `);
            }));
            it('throws error with wrong access', () => __awaiter(void 0, void 0, void 0, function* () {
                fetchMock.mockOnce(JSON.stringify({
                    statusCode: 422,
                    name: 'invalid_access',
                    message: 'Access must be "full_access" | "sending_access"',
                }), {
                    status: 422,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_924b3rjh2387fbewf823',
                    },
                });
                const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
                yield expect(resend.apiKeys.create({
                    name: 'Test',
                    permission: 'wrong_access',
                })).resolves.toThrowErrorMatchingInlineSnapshot('"Access must be "full_access" | "sending_access""');
            }));
        });
        describe('restricted by domain', () => {
            it('creates api key restricted by domain', () => __awaiter(void 0, void 0, void 0, function* () {
                fetchMock.mockOnce(JSON.stringify({
                    token: 're_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk',
                    id: '430eed87-632a-4ea6-90db-0aace67ec228',
                }), {
                    status: 201,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_924b3rjh2387fbewf823',
                    },
                });
                const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
                yield expect(resend.apiKeys.create({
                    name: 'Test',
                    permission: 'sending_access',
                    domain_id: '7dfcf219-9900-4169-86f3-801e6d9b935e',
                })).resolves.toMatchInlineSnapshot(`
          {
            "id": "430eed87-632a-4ea6-90db-0aace67ec228",
            "token": "re_PKr4RCko_Lhm9ost2YjNCctnPjbLw8Nqk",
          }
        `);
            }));
            it('throws error with wrong access', () => __awaiter(void 0, void 0, void 0, function* () {
                fetchMock.mockOnce(JSON.stringify({
                    name: 'application_error',
                    message: 'Something went wrong',
                    statusCode: 500,
                }), {
                    status: 500,
                    headers: {
                        'content-type': 'application/json',
                        Authorization: 'Bearer re_924b3rjh2387fbewf823',
                    },
                });
                const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
                yield expect(resend.apiKeys.create({
                    name: 'Test',
                    permission: 'sending_access',
                    domain_id: '1234',
                })).resolves.toThrowErrorMatchingInlineSnapshot('"Something went wrong"');
            }));
        });
    });
    describe('list', () => {
        it('lists api keys', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({
                data: [
                    {
                        id: '5262504e-8ed7-4fac-bd16-0d4be94bc9f2',
                        name: 'My API Key 1',
                        created_at: '2023-04-07T20:29:10.666968+00:00',
                    },
                    {
                        id: '98c37b35-1473-4afe-a627-78e975a36fab',
                        name: 'My API Key 2',
                        created_at: '2023-04-06T23:09:49.093947+00:00',
                    },
                ],
            }), {
                status: 200,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.list()).resolves.toMatchInlineSnapshot(`
        {
          "data": [
            {
              "created_at": "2023-04-07T20:29:10.666968+00:00",
              "id": "5262504e-8ed7-4fac-bd16-0d4be94bc9f2",
              "name": "My API Key 1",
            },
            {
              "created_at": "2023-04-06T23:09:49.093947+00:00",
              "id": "98c37b35-1473-4afe-a627-78e975a36fab",
              "name": "My API Key 2",
            },
          ],
        }
      `);
        }));
    });
    describe('remove', () => {
        it('removes an api key', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({}), {
                status: 200,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.remove('5262504e-8ed7-4fac-bd16-0d4be94bc9f2')).resolves.toMatchInlineSnapshot('undefined');
        }));
        it('throws error when missing id', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({
                name: 'application_error',
                message: 'Something went wrong',
                statusCode: 500,
            }), {
                status: 500,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.remove('')).resolves.toMatchInlineSnapshot('undefined');
        }));
        it('throws error when wrong id', () => __awaiter(void 0, void 0, void 0, function* () {
            fetchMock.mockOnce(JSON.stringify({
                name: 'not_found',
                message: 'API key not found',
                statusCode: 404,
            }), {
                status: 404,
                headers: {
                    'content-type': 'application/json',
                    Authorization: 'Bearer re_924b3rjh2387fbewf823',
                },
            });
            const resend = new resend_1.Resend('re_zKa4RCko_Lhm9ost2YjNCctnPjbLw8Nop');
            yield expect(resend.apiKeys.remove('34bd250e-615a-400c-be11-5912572ee15b')).resolves.toMatchInlineSnapshot('undefined');
        }));
    });
});
